services:
  patient-service:
    image: patient-service:latest
    container_name: patient-service
    restart: no
    environment:
      SERVER_PORT: 4000
      SPRING_DATASOURCE_URL: jdbc:postgresql://patient-service-db:5432/mydatabase
      SPRING_DATASOURCE_USERNAME: myuser
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_JPA_HIBERNATE_DDL_AUTO: create
      SPRING_SQL_INIT_MODE: always
      BILLING_SERVICE_ADDRESS: billing-service
      BILLING_SERVICE_GRPC_PORT: 9001
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      # Enable actuator endpoints
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "*"
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
      MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: true
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_SERVICE_NAME: patient-service
    networks:
      - healthcare-network
    depends_on:
      patient-service-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4000/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  patient-service-db:
    image: postgres:15-alpine
    container_name: patient-service-db
    restart: no
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: secret
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256
    volumes:
      - patient_db_data:/var/lib/postgresql/data
    networks:
      - healthcare-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydatabase"]
      interval: 5s
      timeout: 3s
      retries: 5

  analytics-service:
    image: analytics-service:latest
    container_name: analytics-service
    restart: no
    environment:
      SERVER_PORT: 4002
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_SERVICE_NAME: patient-service
    networks:
      - healthcare-network
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4002/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  auth-service:
    image: auth-service:latest
    container_name: auth-service
    restart: no
    environment:
      SERVER_PORT: 4005
      SPRING_DATASOURCE_URL: jdbc:postgresql://auth-service-db:5432/mydatabase
      SPRING_DATASOURCE_USERNAME: myuser
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_SQL_INIT_MODE: always
      JWT_SECRET: oIubescPeBiancaMultMultMultMultMultMultMultMultMultMultMultMultMult
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_SERVICE_NAME: patient-service
    networks:
      - healthcare-network
    depends_on:
      auth-service-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4005/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  auth-service-db:
    image: postgres:15-alpine
    container_name: auth-service-db
    restart: no
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: secret
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256
    volumes:
      - auth_service_data:/var/lib/postgresql/data
    networks:
      - healthcare-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydatabase"]
      interval: 5s
      timeout: 3s
      retries: 5

  billing-service:
    image: billing-service:latest
    container_name: billing-service
    restart: no
    environment:
      HTTP_PORT: 4001
      GRPC_PORT: 9001
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_SERVICE_NAME: patient-service
    networks:
      - healthcare-network
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "grpc_health_probe -addr=localhost:9001 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    restart: no
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_CFG_NUM_PARTITIONS: 3
      KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_CFG_LOG_RETENTION_HOURS: 168
      KAFKA_CFG_LOG_SEGMENT_BYTES: 1073741824
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - healthcare-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 45s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: no
    environment:
      KAFKA_CLUSTERS_0_NAME: healthcare-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    ports:
      - "8080:8080"
    networks:
      - healthcare-network
    depends_on:
      kafka:
        condition: service_healthy
    profiles:
      - monitoring

  api-gateway:
    image: api-gateway:latest
    container_name: api-gateway
    restart: no
    environment:
      SERVER_PORT: 4004
      LOGGING_LEVEL_ROOT: DEBUG
      SPRING_CLOUD_GATEWAY_HTTPSERVER_WIRETAP: "true"
      SPRING_CLOUD_GATEWAY_HTTPCLIENT_WIRETAP: "true"
      AUTH_SERVICE_URL: http://auth-service:4005
      SPRING_MAIN_WEB_APPLICATION_TYPE: reactive
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_SERVICE_NAME: patient-service
    ports:
      - "4004:4004"
    networks:
      - healthcare-network
    depends_on:
      - patient-service
      - billing-service
      - auth-service
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4004/actuator/health || curl -f http://localhost:4004/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    restart: no
    user: "0:0"  # Run as root to access docker socket
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--enable-feature=exemplar-storage'
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - healthcare-network
    depends_on:
      - patient-service
      - billing-service
      - analytics-service
      - auth-service
      - api-gateway

  loki:
    image: grafana/loki:main
    container_name: loki
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"
    networks:
      - healthcare-network

  grafana:
    image: grafana/grafana:main
    container_name: grafana
    restart: no
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_PATHS_DATA: /var/lib/grafana
      GF_PATHS_LOGS: /var/log/grafana
      GF_PATHS_PLUGINS: /var/lib/grafana/plugins
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_logs:/var/log/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - healthcare-network
    depends_on:
      - prometheus
      - loki
      - tempo

  tempo:
    image: grafana/tempo:2.2.2
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./monitoring/tempo/tempo.yaml:/etc/tempo.yaml:ro
      - ./monitoring/tempo/tempo-data:/tmp/tempo
    ports:
      - "3110:3100"   # Tempo HTTP
      - "9411:9411"   # Zipkin
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
    networks:
      - healthcare-network

networks:
  healthcare-network:
    driver: bridge

volumes:
  patient_db_data:
    driver: local
  auth_service_data:
    driver: local
  kafka_data:
    driver: local
  loki_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  grafana_logs:
    driver: local
