spring:
#  profiles:
#    active: x,y,z
  application:
    name: patient-service
  datasource:
    url: jdbc:postgresql://localhost:5432/mydatabase
    username: myuser
    password: secret
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    defer-datasource-initialization: true  # ðŸ”¹ Ensures data.sql runs AFTER Hibernate creates tables
    database:
    open-in-view: false
  devtools:
    restart:
      enabled: false
    livereload:
      enabled: false
  sql:
    init:
      mode: always
      platform: postgresql
  #     Inhibits the creation of tables based on entities
#      mode: never
  jackson:
    date-format: yyyy-MM-dd
    time-zone: UTC
  kafka:
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.ByteArraySerializer

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method

logging:
  level:
    root: info
  pattern:
    correlation: "[${spring.application.name},%X{traceId:-},%X{spanId:-}]"

server:
  port: ${patient.service.port}
  http2:
    enabled: true

management:
  otlp:
    tracing:
      endpoint: http://tempo:4317  #
      protocol: grpc
      timeout: 10s   # increase for Docker networking latency

  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always
  metrics:
    distribution:
      percentiles-histogram:
        http.server.requests: true
    enable:
      kafka: true
    tags:
      application: patient-service # change per service
      environment: dev
  prometheus:
    metrics:
      export:
        enabled: true
  observations:
    key-values:
      application: patient-service

